*pretty_args* pretty :Args commad	Last change: 04 August 2013

This pluginn provides a bunch of commands which implements a different
(complementary) way of |:args|, |:argu|, |:arga| and |:argd| vim commands.
    
						    *:Args*
:Args[!] [mods] [newline]
:Args [newline]

	The [mods] is a |filename-modifier| used to modify the file names.
	The default is ":t" (which prints just the base name).  Except of
	standard |filename-modifier|s there are two additional ones:
						    *%:H* *%:S* *::H* *::S*
	    :H	prints basefile name together with its parent directory.  If
		combined with more :H.  If combined with more :H prints more
		directory components of the path.
	    :S	is using |pathshorten()| to shorten the path.
	Note that you can combine modifiers as usual, for example ":H:S" is
	a valid modifier.  It will print "d/pretty_args.txt" where ":H" would
	print "doc/pretty_args.txt".

						    *Args_fnamemodifier*
	The last used [mods] is remembered and it will be used next time,
	unless the bang "!" is used.  You can also specify the default
	modifier in |Args_fnamemodifier| variable.  If this is the
	case it will be used, instead of ":t" when |:Args| is run for the
	first time.

	|:Args| command is using |hl-Directory| group to highlight the current
	arg instead of [...] like |:arg| does.

	If [newline] argument is used the each arg is printed in a separate
	line.  [newline] can be anything except a string starting with ":"
	like modifiers do.  This is useful with the ":p" modifier.

Example: if you want to remove a common path from args, which is the case if
you work on a project which under "/home/user/project/" directory, you can use
the following path modifier: >
    :Args :p:s?^/home/user/project/??
<or even: >
    :Args :p:s?^/home/user/project/??:S
<
Another tip is useful if the path is long and you do not want to type it.
Then you can use ^r=expand('%:p:h:h...') in the command line.  Check |^r=| and
|%:p|, |%:h|.

						    *:Argu*
:Argu [file]
    This command acts like |:argu| but beside a number it accepts argpath
    argument, i.e. an element as displayed by |:Args| using
    |g:Args_fnamemodifier|.  [file] can be completed. 

						    *:Arga*
:[count]Arga[!] [name] ..
nmap \a

    This command acts like |:arga| with the only difference that you can ommit
    the [name].  If this is the case the current buffer will be added, i.e.
    this is equivalent to |:arga%|, but it is easier to type. There is also
    a normal mode map for that.

    The difference from |:arga| is that it will not add a file if it is
    already present in the |arglist|.  If you use bang "!", and the [name] is
    in the |arglist| it will be moved where [count] suggest.


						    *:Argm*
:Argm [file] {ind}

    Move [file] to {ind} in |arglist|.  If [file] is not given then the
    current active argument is used (as highlighted by |:args| or |:Args|, see
    |argidx()|).


There is one public function:
						    *Fnamemodify()*
Fnamemodify({fname}, {mods})
	It works like |fnamemodify()| but also handles the two
	additional modifiers ":H" and ":S".
